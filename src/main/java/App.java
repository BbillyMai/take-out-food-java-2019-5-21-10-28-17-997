import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here

        // 存放账单的菜品
        List<Item> itemList = new ArrayList<>();
        // 存放账单id和数量
        Map<String,Integer> map = new HashMap<>();
        // 解析账单
        for (String s:inputs) {
            String[] arr = s.split("x");
            String id = arr[0].trim();
            Integer num = Integer.valueOf(arr[1].trim());
            itemList.add(itemRepository.findById(id));
            map.put(id,num);
        }
        // System.out.println(map.toString());
        // System.out.println(itemList.toString());

        // 计算没有优惠的总价
        double noDiscount = 0.0;
        for(Item item:itemList){
            noDiscount += item.getPrice() *  map.get(item.getId());
        }

        double minMoney = noDiscount;
        // 计算每种优惠价格
        List<SalesPromotion> salesPromotions = salesPromotionRepository.findAll();
        int index = -1;
        for(SalesPromotion salesPromotion:salesPromotions){
            double discount = 0.0;
            // 计算满30减6的优惠
            if("BUY_30_SAVE_6_YUAN".equals(salesPromotion.getType())){
                for(Item item:itemList){
                    discount += item.getPrice() *  map.get(item.getId());
                }
                //
                if(discount > 30){
                    discount -= 6;
                }

            }

            // 计算指定菜品打半折优惠
            if("50%_DISCOUNT_ON_SPECIFIED_ITEMS".equals(salesPromotion.getType())){
                for(Item item:itemList){
                    // 账单上的菜品是否为指定打折菜品
                    if(salesPromotion.getRelatedItems().contains(item.getId())){
                        discount += item.getPrice()/2 *  map.get(item.getId());
                    }else{
                        discount += item.getPrice() *  map.get(item.getId());
                    }
                }

            }

            // 得出最优惠方案
            if(minMoney > discount){
                minMoney = discount;
                index = salesPromotions.indexOf(salesPromotion);
            }
        }
        //System.out.println(minMoney+"  "+index);

        // 输出账单
        String order = "============= 订餐明细 =============\n";

        // 列出清单
        for(Item item:itemList){
            int num = map.get(item.getId());
            int price = (int) (num*item.getPrice());
            order += item.getName()+" x "+ num +" = "+ price +"元\n";
        }

        // 计算所省钱
        int saveMoeny = (int) (noDiscount - minMoney);

        if(noDiscount != minMoney) {
            order += "-----------------------------------\n";
            order += "使用优惠:\n";
            if (index == 0) {
                order += "满30减6元，省" + saveMoeny + "元\n";
            } else if (index == 1) {
                order += "指定菜品半价(黄焖鸡，凉皮)，省" + saveMoeny + "元\n";
            }
        }
        order += "-----------------------------------\n";
        int total = (int)minMoney;
        order += "总计："+ total +"元\n";
        order += "===================================";

        System.out.println(order);
        return order;
    }
}
